/**
 * @license
 *-------------------------------------------------------------------------------------------
 * Copyright Â© 2024 Progress Software Corporation. All rights reserved.
 * Licensed under commercial license. See LICENSE.md in the package root for more information
 *-------------------------------------------------------------------------------------------
 */
"use client";
import * as t from "react";
import e from "prop-types";
import { validatePackage as P, classNames as b, uFloatingLabel as f } from "@progress/kendo-react-common";
import { provideLocalizationService as V, registerForLocalization as k } from "@progress/kendo-react-intl";
import { labelsOptional as g, messages as B } from "./messages/index.mjs";
import { packageMetadata as O } from "./package-metadata.mjs";
const i = class i extends t.Component {
  constructor(s) {
    super(s), this.state = {
      focused: !1
    }, this.handleFocus = (a) => {
      this.setState({ focused: !0 });
    }, this.handleBlur = (a) => {
      this.setState({ focused: !1 });
    }, P(O);
  }
  /**
   * @hidden
   */
  render() {
    const { label: s, editorId: a, className: N, labelClassName: y, editorValue: r, editorPlaceholder: E, editorValid: C, editorDisabled: n, style: v, id: c, optional: F, unstyled: d, ...S } = this.props, z = V(this), p = F ? z.toLanguageString(g, B[g]) : "", m = p && /* @__PURE__ */ t.createElement("span", { className: "k-label-optional" }, p), u = d && d.uFloatingLabel, o = !E && !r && r !== 0, L = b(f.wrapper(
      {
        c: u,
        focused: this.state.focused,
        empty: o,
        notEmpty: !o,
        disabled: n,
        isRtl: this.props.dir === "rtl"
      }
    ), N), h = b(f.label(
      {
        c: u,
        focused: this.state.focused,
        empty: o,
        notEmpty: !o,
        invalid: C === !1,
        disabled: n
      }
    ), y);
    return /* @__PURE__ */ t.createElement(
      "span",
      {
        ...S,
        id: this.props.id,
        className: L,
        onFocus: this.handleFocus,
        onBlur: this.handleBlur,
        style: v,
        dir: this.props.dir
      },
      this.props.children,
      s ? a ? /* @__PURE__ */ t.createElement("label", { id: c, htmlFor: a, className: h }, s, m) : /* @__PURE__ */ t.createElement("span", { id: c, className: h }, s, m) : null
    );
  }
};
i.propTypes = {
  label: e.string,
  editorId: e.string,
  editorValue: e.oneOfType([e.string, e.bool, e.number]),
  editorPlaceholder: e.string,
  editorValid: e.bool,
  editorDisabled: e.bool,
  id: e.string,
  style: e.object,
  className: e.string,
  labelClassName: e.string,
  optional: e.bool
};
let l = i;
k(l);
export {
  l as FloatingLabel
};
