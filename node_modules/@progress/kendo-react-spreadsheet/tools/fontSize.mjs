/**
 * @license
 *-------------------------------------------------------------------------------------------
 * Copyright Â© 2024 Progress Software Corporation. All rights reserved.
 * Licensed under commercial license. See LICENSE.md in the package root for more information
 *-------------------------------------------------------------------------------------------
 */
"use client";
import * as l from "react";
import { ComboBox as F } from "@progress/kendo-react-dropdowns";
import { FONT_SIZES as I, DEFAULT_FONT_SIZE as v } from "./utils.mjs";
import { keys as m, messages as y } from "../messages.mjs";
import { useLocalization as z } from "@progress/kendo-react-intl";
import { Button as x } from "@progress/kendo-react-buttons";
import { fontGrowIcon as N, fontShrinkIcon as b } from "@progress/kendo-svg-icons";
const p = 1, f = 409, d = (e) => typeof e == "string" ? parseFloat(e) : e, k = (e) => {
  const { spreadsheetRef: r } = e, o = d(e.value), u = l.useCallback((a) => {
    var c;
    let t = a.value ? d(a.value) : o;
    t = isNaN(t) ? o : t, t = Math.min(f, Math.max(p, t));
    const i = {
      command: "PropertyChangeCommand",
      options: { property: "fontSize", value: t }
    };
    a.nativeEvent.type === "keydown" || a.nativeEvent.type === "focusout" ? (c = r.current) == null || c.executeCommand(i) : setTimeout(() => {
      var n;
      (n = r.current) == null || n.executeCommand(i);
    }, 0);
  }, [o]), s = z().toLanguageString(m.fontSize, y[m.fontSize]);
  return /* @__PURE__ */ l.createElement(
    F,
    {
      onChange: u,
      value: o,
      data: I,
      defaultValue: v,
      allowCustom: !0,
      fillMode: "flat",
      title: s,
      tabIndex: -1,
      clearButton: !1,
      ariaLabel: s
    }
  );
};
k.displayName = "FontSize";
const g = (e) => {
  const r = (o) => {
    const { property: u, icon: s, svgIcon: a, titleKey: t, step: i } = e, { spreadsheetRef: c } = o, n = d(o.value), C = l.useCallback(() => {
      var S;
      const h = {
        command: "PropertyChangeCommand",
        options: { property: u, value: Math.min(f, Math.max(p, n + i)) }
      };
      (S = c.current) == null || S.executeCommand(h);
    }, [n]);
    return /* @__PURE__ */ l.createElement(
      x,
      {
        type: "button",
        icon: s,
        svgIcon: a,
        fillMode: "flat",
        onClick: C,
        disabled: n + i < p || n + i > f,
        title: z().toLanguageString(t, y[t])
      }
    );
  };
  return r.displayName = e.displayName, r;
}, B = g({
  property: "fontSize",
  icon: "font-grow",
  svgIcon: N,
  titleKey: m.fontSizeIncrease,
  displayName: "IncreaseFontSize",
  step: 1
}), K = g({
  property: "fontSize",
  icon: "font-shrink",
  svgIcon: b,
  titleKey: m.fontSizeDecrease,
  displayName: "DecreaseFontSize",
  step: -1
});
export {
  K as DecreaseFontSize,
  k as FontSize,
  B as IncreaseFontSize
};
