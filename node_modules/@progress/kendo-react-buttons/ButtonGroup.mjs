/**
 * @license
 *-------------------------------------------------------------------------------------------
 * Copyright Â© 2024 Progress Software Corporation. All rights reserved.
 * Licensed under commercial license. See LICENSE.md in the package root for more information
 *-------------------------------------------------------------------------------------------
 */
"use client";
import * as r from "react";
import o from "prop-types";
import { validatePackage as g, classNames as m, uButtonGroup as h } from "@progress/kendo-react-common";
import { packageMetadata as f } from "./package-metadata.mjs";
const u = class u extends r.Component {
  constructor(t) {
    super(t), this._element = null, g(f);
  }
  /**
   * @hidden
   */
  render() {
    const { children: t, className: n, dir: p, disabled: s, unstyled: e, width: a } = this.props, c = e && e.uButtonGroup, l = this.mapButtons(t), i = m(
      h.wrapper({
        c,
        stretched: !!a,
        disabled: s
      }),
      n
    ), d = {
      className: i,
      style: { width: `${a}` },
      dir: p,
      // Accessibility properties
      role: "group",
      "aria-disabled": s
    };
    return /* @__PURE__ */ r.createElement(
      "div",
      {
        ref: (y) => {
          this._element = y;
        },
        ...d,
        className: i
      },
      l
    );
  }
  mapButtons(t) {
    const n = r.Children.count(t), p = this.props.dir !== void 0 ? this.props.dir === "rtl" : this._element && getComputedStyle(this._element).direction === "rtl" || !1;
    return r.Children.map(t, (s, e) => {
      if (r.isValidElement(s)) {
        const { unstyled: a } = this.props, c = a && a.uButtonGroup, l = e === n - 1, i = p, d = m(
          s.props.className,
          h.position({
            c,
            start: i ? l : e === 0,
            end: i ? e === 0 : l
          })
        );
        return this.renderButton(s, d);
      }
      return s;
    });
  }
  renderButton(t, n) {
    const p = { ...this.props.width ? { width: this.props.width } : {}, ...t.props.style || {} }, s = this.props.disabled || t.props.disabled, e = {
      ...t.props,
      ...n ? { className: n } : {},
      ...Object.keys(p).length ? { style: p } : {},
      ...s !== void 0 ? { disabled: s } : {}
    };
    return r.Children.count(t.props.children) > 0 ? r.cloneElement(t, e, t.props.children) : r.cloneElement(t, e);
  }
};
u.propTypes = {
  children: o.oneOfType([o.arrayOf(o.element), o.element]),
  className: o.string,
  disabled: o.bool,
  width: o.string,
  dir: o.string
};
let b = u;
export {
  b as ButtonGroup
};
